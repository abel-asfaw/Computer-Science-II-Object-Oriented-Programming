/*
  File:    DecayList.cpp
  Author:  Abel Asfaw
  Date:    10/12/2019
  Section: 15
  E-mail:  aasfaw1@umbc.edu
  Description:
*/
#include "Decay.h"

// Constructor
// Preconditions: None
// Postconditions: None
Decay::Decay(){
    m_file = "";
}

// Destructor - Deletes all lists in m_list
// Preconditions: m_list is populated
// Postconditions: All lists are deleted and there are no memory leaks
Decay::~Decay(){
    EmptyLists();
}

// EmptyLists() - Empties all lists in m_list
// Preconditions: m_list is populated
// Postconditions: All lists are deleted and there are no memory leaks
void Decay::EmptyLists(){
    for (int i = 0; i < int(m_list.size()); i++){
        delete m_list[i];
        m_list[i] = nullptr;
    }
}

// LoadFile - Requests a file and loads all linked lists in a file (separated by ;)
// Preconditions: Valid input file exists (preferably with three lines of data)
// Postconditions: m_list is initialized
void Decay::LoadFile(){
    ifstream decayFile;
    char boolean;
    Node* newNode;
    DecayList* newList = new DecayList();
    cout << "What is the name of the file?\n";
    cin >> m_file;
    decayFile.open(m_file);
    //checks if file is open
    if (decayFile.is_open()){
        while (decayFile >> boolean){
            if (boolean != ';'){
                if (boolean == '1'){
                    newNode = new Node(1);
                }
                else if (boolean == '0'){
                    newNode = new Node(0);
                }
                newList->InsertEnd(newNode);
            }
            else{
                m_list.push_back(newList);
                newList = new DecayList();
            }
        }
        delete newList;
    }
    else{
        cout << "File is not open.\n";
        m_file = "";
    }
}

// ChooseList - After a file is loaded, allows user to choose a list to simulate
// Preconditions: User has chosen to start simulation
// Postconditions: Simulation is started on list chosen by user
void Decay::ChooseList(){
    int quit = int(m_list.size()) + 1;
    if (int(m_list.size()) < 1){
        cout << "File has not been loaded.\n";
    }
    else{
        int choice;
        do{
            cout << "Which Decay scenario do you want to experience?\n";
            for (int i = 0; i < int(m_list.size()); i++){
                cout << i+1 << ". List " << i+1 << " (" << m_list.at(i)->GetSize() << " nodes)\n";
            }
            cout << quit << ". Quit\n";
            cin >> choice;
        }while (choice < 1 || choice > quit);
        if (choice != quit && m_list.at(choice - 1)->CheckEmpty() == false){
            RunSimulation(choice - 1);
        }
        else if (m_list.at(choice - 1)->CheckEmpty() == true){
            cout << "All nodes from that list have been removed.\n";
        }
    }
}

// CreateRandomList - Creates list of a specific size (1-10000) times 3 nodes each
// Preconditions: m_list is empty
// Postconditions: m_list.at(0) has a list loaded into it
void Decay::CreateRandomList(){
    //create random list if file hasn't already been loaded
    if (m_file == ""){
        int listSize;
        Node* newNode;
        DecayList* newList = new DecayList();
        do{
            cout << "How large a list would you like?\n";
            cin >> listSize;
        }while (listSize < 1 || listSize > 10000);
        listSize *= 3;
        for (int i = 0; i < listSize; i++){
            int boolean = rand() % 2;
            newNode = new Node(boolean);
            newList->InsertEnd(newNode);
        }
        m_list.push_back(newList);
        RunSimulation(0);
    }
    else{
        cout << "There is already a loaded file.\n";
    }
}

// RunSimulation - Simulate one of the loaded lists
// Preconditions: A DecayList is available
// Postconditions: Simulation is run
void Decay::RunSimulation(int index){
    cout << "The sequence has been initialized.\n";
    m_list.at(index)->PrintDecayList();
    
    int choice;
    int removed;
    while (m_list.at(index)->CheckEmpty() == false){
        do{
            cout << "Which node would you like to change?\n";
            for (int i = 1; i <= m_list.at(index)->GetSize(); i++){
                cout << " " << i << "   ";
            }
            cout << endl;
            cin >> choice;
        }while (choice < 1 || choice > m_list.at(index)->GetSize());
        m_list.at(index)->InvertValue(choice - 1);
        //traverse the list if list has nodes
        if (m_list.at(index)->CheckEmpty() == false){
            removed = m_list.at(index)->TraverseList(true);
            m_list.at(index)->PrintDecayList();
            if (removed > 0){
                cout << removed << " nodes removed.\n";
            }
        }
    }
    //send false parameter to traverse list if list is empty
    removed = m_list.at(index)->TraverseList(false);
    
}

// Start - Starts sim. Can load file, choose list, or create random list
// Preconditions: A DecayList is available
// Postconditions: Empties all lists after one is simulated.
void Decay::Start(){
    const int QUIT = 4;
    cout << "Welcome to Decay, where you code a frustrating system instead of doing your physics homework.\n";
    int choice;
    do{
        cout << "What would you like to do?" << endl
            << "1. Load File\n"
            << "2. Simulate Loaded File\n"
            << "3. Simulate Random File\n"
            << "4. Quit\n";
        cin >> choice;
        switch (choice){
        case 1: 
            LoadFile();
            break;
        case 2:
            ChooseList();
            break;
        case 3:
            CreateRandomList();
            break;
        case QUIT:
            cout << "Thank you for playing!\n";
            break;
        default:
            cout << "Please enter a valid menu option\n";
            break;
        }
    }while (choice != QUIT);
}
